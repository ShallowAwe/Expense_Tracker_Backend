// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(uuid())
  email               String        @unique
  passwordHash        String        @map("password_hash")
  fullName            String?       @map("full_name")
  phoneNumber         String?       @map("phone_number")
  monthlyIncome       Decimal?      @map("monthly_income") @db.Decimal(12, 2)
  currencyPreference  String        @default("INR") @map("currency_preference")
  timezone            String        @default("Asia/Kolkata")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")
  
  transactions        Transaction[]
  budgets             Budget[]
  insights            UserInsight[]
  merchantMappings    MerchantMapping[]
  
  @@map("users")
}

model Transaction {
  id                    String    @id @default(uuid())
  userId                String    @map("user_id")
  
  transactionType       String    @map("transaction_type") // debit/credit
  amount                Decimal   @db.Decimal(12, 2)
  currency              String    @default("INR")
  
  merchantName          String?   @map("merchant_name")
  merchantNormalized    String?   @map("merchant_normalized")
  category              String
  subcategory           String?
  
  paymentMode           String?   @map("payment_mode") // UPI/Card/ATM
  accountLast4          String?   @map("account_last4")
  referenceId           String?   @map("reference_id")
  
  transactionDate       DateTime  @map("transaction_date")
  createdAt             DateTime  @default(now()) @map("created_at")
  
  smsSender             String?   @map("sms_sender")
  smsHash               String?   @unique @map("sms_hash") // Deduplication
  
  confidenceScore       Decimal?  @db.Decimal(3, 2) @map("confidence_score")
  parsingMethod         String?   @map("parsing_method") // rule_based/manual
  userCorrected         Boolean   @default(false) @map("user_corrected")
  
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, transactionDate(sort: Desc)])
  @@index([userId, category])
  @@index([smsHash])
  @@map("transactions")
}

model Category {
  id              Int       @id @default(autoincrement())
  name            String    @unique // food_dining, transport, etc.
  displayName     String    @map("display_name") // "Food & Dining"
  icon            String    // Icon identifier
  colorHex        String    @map("color_hex")
  parentId        Int?      @map("parent_id")
  isSystem        Boolean   @default(true) @map("is_system")
  sortOrder       Int       @default(0) @map("sort_order")
  createdAt       DateTime  @default(now()) @map("created_at")
  
  parent          Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[] @relation("CategoryHierarchy")
  
  @@map("categories")
}

model MerchantMapping {
  id                String    @id @default(uuid())
  userId            String    @map("user_id")
  merchantName      String    @map("merchant_name")
  category          String
  confidenceScore   Decimal?  @db.Decimal(3, 2) @map("confidence_score")
  timesCorrected    Int       @default(0) @map("times_corrected")
  lastUsed          DateTime  @default(now()) @map("last_used")
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, merchantName])
  @@index([userId, category])
  @@map("merchant_mappings")
}

model Budget {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  category        String
  monthlyLimit    Decimal   @db.Decimal(10, 2) @map("monthly_limit")
  alertThreshold  Decimal   @default(0.80) @db.Decimal(3, 2) @map("alert_threshold")
  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, category])
  @@map("budgets")
}

model UserInsight {
  id                  String    @id @default(uuid())
  userId              String    @map("user_id")
  
  periodStart         DateTime  @map("period_start")
  periodEnd           DateTime  @map("period_end")
  
  totalSpent          Decimal   @db.Decimal(12, 2) @map("total_spent")
  totalEarned         Decimal   @db.Decimal(12, 2) @map("total_earned")
  transactionCount    Int       @map("transaction_count")
  avgTransaction      Decimal   @db.Decimal(10, 2) @map("avg_transaction")
  
  categoryBreakdown   Json      @map("category_breakdown") // {food: 5000, ...}
  spendingTrend       String    @map("spending_trend") // increasing/decreasing/stable
  topMerchants        Json      @map("top_merchants")
  anomalies           Json?     // Unusual transactions
  recommendations     String[]  // AI-generated tips
  
  healthScore         Int?      @map("health_score") // 0-100
  
  createdAt           DateTime  @default(now()) @map("created_at")
  
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, periodStart, periodEnd])
  @@index([userId, periodStart])
  @@map("user_insights")
}
